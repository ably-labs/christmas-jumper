const FrameReader = require("./FrameReader");

const sut = new FrameReader();

describe("FrameReader", () => {

    it("can return snaked frames from valid detected image", async () => {
        const expectation = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [255, 200, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 100, 0], [255, 155, 0], [255, 155, 0], [255, 200, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [255, 200, 0], [255, 155, 0], [255, 155, 0], [255, 100, 0], [255, 100, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 100, 0], [255, 100, 0], [255, 100, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 100, 0], [255, 100, 0], [255, 100, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 255, 0], [255, 155, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 155, 0], [255, 255, 0], [0, 0, 0], [255, 255, 0], [255, 155, 0], [255, 255, 0], [255, 255, 255], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 155, 0], [255, 255, 0], [255, 155, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 200, 0], [255, 200, 0], [255, 200, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 100, 0], [255, 100, 0], [255, 100, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0], [255, 155, 0]];
        const result = await sut.execute("bell");

        expect(JSON.stringify(result.rgbFrames[0].data)).toBe(JSON.stringify(expectation));
    });

    it("single frame images has -1 duration", async () => {
        const result = await sut.execute("default");

        expect(result.rgbFrames[0].duration).toBe(-1);
    });

    it("can get multiple frames when key has more than one image", async () => {
        const result = await sut.execute("frametest");

        expect(result.rgbFrames.length).toBe(2);
    });

    it("frames load their durations where available", async () => {
        const result = await sut.execute("frametest");

        expect(result.rgbFrames[0].duration).toBe(5000);
    });

    it("frames without durations default to ten second windows", async () => {
        const result = await sut.execute("indexframetest");

        expect(result.rgbFrames[0].duration).toBe(10000);
    });
});
